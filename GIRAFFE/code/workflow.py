"#This is a Nipype generator. Warning, here be dragons.\n#!/usr/bin/env python\n\nimport sys\nimport nipype\nimport nipype.pipeline as pe\n\r\nimport nipype.interfaces.io as io\r\nimport nipype.interfaces.fsl as fsl\r\nimport nipype.algorithms.confounds as confounds\r\n\r\n#Generic datagrabber module that wraps around glob in an\r\nmy_io.S3DataGrabber = pe.Node(io.S3DataGrabber(outfields=[\"outfiles\"]), name = 'my_io.S3DataGrabber')\r\nmy_io.S3DataGrabber.inputs.bucket = 'openneuro'\r\nmy_io.S3DataGrabber.inputs.sort_filelist = True\r\nmy_io.S3DataGrabber.inputs.template = 'sub-01/func/sub-01_task-simon_run-1_bold.nii.gz'\r\nmy_io.S3DataGrabber.inputs.anon = True\r\nmy_io.S3DataGrabber.inputs.bucket_path = 'ds000101/ds000101_R2.0.0/uncompressed/'\r\nmy_io.S3DataGrabber.inputs.local_directory = '/tmp'\r\n\r\n#Wraps command **slicetimer**\r\nmy_fsl.SliceTimer = pe.Node(interface = fsl.SliceTimer(), name='my_fsl.SliceTimer', iterfield = [''])\r\n\r\n#Wraps command **mcflirt**\r\nmy_fsl.MCFLIRT = pe.Node(interface = fsl.MCFLIRT(), name='my_fsl.MCFLIRT', iterfield = [''])\r\n\r\n#Computes the time-course SNR for a time series\r\nmy_confounds.TSNR = pe.Node(interface = confounds.TSNR(), name='my_confounds.TSNR', iterfield = [''])\r\nmy_confounds.TSNR.inputs.regress_poly = 3\r\n\r\n#Wraps command **fslstats**\r\nmy_fsl.ImageStats = pe.Node(interface = fsl.ImageStats(), name='my_fsl.ImageStats', iterfield = [''])\r\nmy_fsl.ImageStats.inputs.op_string = '-p 98'\r\n\r\n#Wraps command **fslmaths**\r\nmy_fsl.Threshold = pe.Node(interface = fsl.Threshold(), name='my_fsl.Threshold', iterfield = [''])\r\nmy_fsl.Threshold.inputs.args = '-bin'\r\n\r\n#Anatomical compcor: for inputs and outputs, see CompCor.\r\nmy_confounds.ACompCor = pe.Node(interface = confounds.ACompCor(), name='my_confounds.ACompCor', iterfield = [''])\r\nmy_confounds.ACompCor.inputs.num_components = 2\r\n\r\n#Wraps command **fsl_regfilt**\r\nmy_fsl.FilterRegressor = pe.Node(interface = fsl.FilterRegressor(), name='my_fsl.FilterRegressor', iterfield = [''])\r\nmy_fsl.FilterRegressor.inputs.filter_columns = [1, 2]\r\n\r\n#Wraps command **fslmaths**\r\nmy_fsl.TemporalFilter = pe.Node(interface = fsl.TemporalFilter(), name='my_fsl.TemporalFilter', iterfield = [''])\r\nmy_fsl.TemporalFilter.inputs.highpass_sigma = 25\r\n\r\n#Generic datasink module to store structured outputs\r\nmy_io.DataSink = pe.Node(interface = io.DataSink(), name='my_io.DataSink', iterfield = [''])\r\n\r\n#Create a workflow to connect all those nodes\r\nanalysisflow = nipype.Workflow('MyWorkflow')\r\nanalysisflow.connect(my_undefined, \"undefined\", my_undefined, \"undefined\")\r\nanalysisflow.connect(my_undefined, \"undefined\", my_undefined, \"undefined\")\r\nanalysisflow.connect(my_undefined, \"undefined\", my_undefined, \"undefined\")\r\nanalysisflow.connect(my_undefined, \"undefined\", my_undefined, \"undefined\")\r\nanalysisflow.connect(my_undefined, \"undefined\", my_undefined, \"undefined\")\r\nanalysisflow.connect(my_undefined, \"undefined\", my_undefined, \"undefined\")\r\nanalysisflow.connect(my_undefined, \"undefined\", my_undefined, \"undefined\")\r\nanalysisflow.connect(my_undefined, \"undefined\", my_undefined, \"undefined\")\r\nanalysisflow.connect(my_undefined, \"undefined\", my_undefined, \"undefined\")\r\nanalysisflow.connect(my_undefined, \"undefined\", my_undefined, \"undefined\")\r\nanalysisflow.connect(my_undefined, \"undefined\", my_undefined, \"undefined\")\r\nanalysisflow.connect(my_undefined, \"undefined\", my_undefined, \"undefined\")\r\n\n#Run the workflow\nplugin = 'MultiProc' #adjust your desired plugin here\nplugin_args = {'n_procs': 1} #adjust to your number of cores\nanalysisflow.write_graph(graph2use='flat', format='png', simple_form=False)\nanalysisflow.run(plugin=plugin, plugin_args=plugin_args)\n"